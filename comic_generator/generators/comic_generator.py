"""
–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–º–∏–∫—Å–æ–≤.
"""

import logging
import time
import os
from typing import List, Dict, Any, Optional
from datetime import datetime

from ..models.comic_models import ComicData, StyleType
from ..services.llm_service import LLMServiceManager
from ..services.document_service import DocumentService
from ..generators.content_analyzer import ContentAnalyzer
from ..generators.scenario_generator import ScenarioGenerator
from ..generators.image_generator import ImageGenerator
from ..utils.html_generator import HTMLGenerator
from ..utils.data_manager import DataManager

logger = logging.getLogger(__name__)


class ComicGenerator:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–∏–∫—Å–æ–≤."""
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–º–∏–∫—Å–æ–≤.
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        """
        self.config = config or {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        self.llm_manager = LLMServiceManager(self.config.get("llm", {}))
        self.document_service = DocumentService()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤
        llm = self.llm_manager.get_llm()
        self.content_analyzer = ContentAnalyzer(llm)
        self.scenario_generator = ScenarioGenerator(llm)
        self.image_generator = ImageGenerator(
            self.config.get("stable_diffusion", {}).get("api_base", "http://127.0.0.1:7860")
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Ç–∏–ª–∏—Ç
        self.html_generator = HTMLGenerator()
        self.data_manager = DataManager(
            self.config.get("output_dir", "outputs")
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self.generation_stats = {
            "start_time": None,
            "end_time": None,
            "duration_seconds": 0,
            "images_generated": 0,
            "images_failed": 0,
            "llm_calls": 0,
            "errors": []
        }
    
    def generate_comic_from_pdf(self, 
                               pdf_path: str,
                               target_audience: str = "–≤–∑—Ä–æ—Å–ª—ã–µ",
                               num_panels: int = 8,
                               output_name: str = "comic",
                               style: str = StyleType.EDUCATIONAL.value) -> Optional[str]:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∏–∫—Å–∞ –∏–∑ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞.
        
        Args:
            pdf_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
            target_audience: –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è
            num_panels: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π
            output_name: –ë–∞–∑–æ–≤–æ–µ –∏–º—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            style: –°—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É HTML —Ñ–∞–π–ª—É –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        self.generation_stats["start_time"] = datetime.now()
        
        try:
            logger.info("="*60)
            logger.info("üöÄ –ó–ê–ü–£–°–ö –ì–ï–ù–ï–†–ê–¢–û–†–ê –ö–û–ú–ò–ö–°–û–í")
            logger.info("="*60)
            
            # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
            document_text = self._load_and_validate_document(pdf_path)
            if not document_text:
                return None
            
            # 2. –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            process_info = self._analyze_document_content(document_text)
            
            # 3. –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            characters = self._create_characters(process_info, target_audience)
            
            # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
            panels = self._create_scenario(process_info, characters, target_audience, num_panels)
            
            # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            image_files = self._generate_images(panels, style, output_name)
            
            # 6. –°–æ–∑–¥–∞–Ω–∏–µ HTML
            html_file = self._create_html_output(panels, characters, image_files, output_name)
            
            # 7. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            self._save_project_data(process_info, characters, panels, output_name)
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            self.generation_stats["end_time"] = datetime.now()
            self.generation_stats["duration_seconds"] = (
                self.generation_stats["end_time"] - self.generation_stats["start_time"]
            ).total_seconds()
            
            logger.info("\\n" + "="*60)
            logger.info("üéâ –ö–û–ú–ò–ö–° –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù!")
            logger.info(f"üìÅ HTML —Ñ–∞–π–ª: {html_file}")
            logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {self.generation_stats['duration_seconds']:.1f} —Å–µ–∫")
            logger.info(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω–æ: {self.generation_stats['images_generated']}")
            logger.info("="*60)
            
            return html_file
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–∏–∫—Å–∞: {e}")
            self.generation_stats["errors"].append(str(e))
            return None
    
    def _load_and_validate_document(self, pdf_path: str) -> Optional[str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
        logger.info("üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        
        document_text = self.document_service.load_pdf(pdf_path)
        if not document_text:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å PDF –¥–æ–∫—É–º–µ–Ω—Ç")
            return None
        
        if not self.document_service.validate_document(document_text):
            logger.error("–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é")
            return None
        
        logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω, —Å–∏–º–≤–æ–ª–æ–≤: {len(document_text)}")
        return document_text
    
    def _analyze_document_content(self, document_text: str):
        """–ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
        logger.info("üîç –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        
        self.generation_stats["llm_calls"] += 1
        process_info = self.content_analyzer.extract_process_info(document_text)
        
        if not self.content_analyzer.validate_process_info(process_info):
            logger.warning("–ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback")
        
        logger.info(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –Ω–∞–π–¥–µ–Ω: {process_info.process_name}")
        return process_info
    
    def _create_characters(self, process_info, target_audience):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π."""
        logger.info("üë• –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π...")
        
        self.generation_stats["llm_calls"] += 1
        characters = self.scenario_generator.create_characters(process_info, target_audience)
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {len(characters)}")
        for char in characters:
            logger.info(f"   - {char.name}: {char.role}")
        
        return characters
    
    def _create_scenario(self, process_info, characters, target_audience, num_panels):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è."""
        logger.info(f"üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –Ω–∞ {num_panels} –ø–∞–Ω–µ–ª–µ–π...")
        
        self.generation_stats["llm_calls"] += 1
        panels = self.scenario_generator.create_scenario(
            process_info, characters, target_audience, num_panels
        )
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø–∞–Ω–µ–ª–µ–π: {len(panels)}")
        return panels
    
    def _generate_images(self, panels, style, output_name):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
        logger.info("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
        
        image_files = []
        
        if not self.image_generator.check_server():
            logger.warning("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä Stable Diffusion –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            return image_files
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images_dir = f"{output_name}_images"
        os.makedirs(images_dir, exist_ok=True)
        
        for i, panel in enumerate(panels):
            try:
                logger.info(f"   –ü–∞–Ω–µ–ª—å {i+1}/{len(panels)}: {panel.panel_id}")
                
                image_data = self.image_generator.generate_panel_image(panel, style)
                
                if image_data:
                    filename = os.path.join(images_dir, f"panel_{i+1}.png")
                    if self.image_generator.save_image(image_data, filename):
                        image_files.append(filename)
                        self.generation_stats["images_generated"] += 1
                    else:
                        self.generation_stats["images_failed"] += 1
                else:
                    self.generation_stats["images_failed"] += 1
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏
                time.sleep(1)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–∞–Ω–µ–ª–∏ {i+1}: {e}")
                self.generation_stats["images_failed"] += 1
                self.generation_stats["errors"].append(f"Image generation panel {i+1}: {e}")
        
        logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(image_files)}")
        return image_files
    
    def _create_html_output(self, panels, characters, image_files, output_name):
        """–°–æ–∑–¥–∞–Ω–∏–µ HTML –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞."""
        logger.info("üìñ –°–æ–∑–¥–∞–Ω–∏–µ HTML...")
        
        html_file = self.html_generator.create_comic_html(
            panels=panels,
            characters=characters,
            image_files=image_files,
            output_name=output_name,
            title="–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–∏–∫—Å"
        )
        
        logger.info(f"‚úÖ HTML —Å–æ–∑–¥–∞–Ω: {html_file}")
        return html_file
    
    def _save_project_data(self, process_info, characters, panels, output_name):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞."""
        logger.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞...")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç ComicData
        comic_data = ComicData(
            process_info=process_info,
            characters=characters,
            panels=panels,
            metadata={
                "created_at": datetime.now().isoformat(),
                "generator_version": "1.0",
                "config": self.config
            }
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self.data_manager.save_comic_data(comic_data, output_name)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.data_manager.save_config(self.config, output_name)
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É
        self.data_manager.create_project_summary(
            comic_data, output_name, self.generation_stats
        )
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        self.data_manager.cleanup_temp_files(output_name)
        
        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    
    def get_generation_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        return self.generation_stats.copy()
    
    def validate_dependencies(self) -> Dict[str, bool]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º—ã.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        results = {
            "llm_service": False,
            "stable_diffusion": False,
            "output_directory": False
        }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ LLM
            results["llm_service"] = self.llm_manager.validate_llm_connection()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Stable Diffusion
            results["stable_diffusion"] = self.image_generator.check_server()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            results["output_directory"] = os.path.exists(self.data_manager.output_dir)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
        
        return results