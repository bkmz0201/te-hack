"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä HTML –¥–ª—è –∫–æ–º–∏–∫—Å–æ–≤.
"""

import base64
import os
import logging
from typing import List, Dict, Any, Optional

from ..models.comic_models import ComicPanel, ComicCharacter

logger = logging.getLogger(__name__)


class HTMLGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä HTML —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –∫–æ–º–∏–∫—Å–æ–≤."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ HTML."""
        pass
    
    def create_comic_html(self, 
                         panels: List[ComicPanel], 
                         characters: List[ComicCharacter],
                         image_files: List[str], 
                         output_name: str,
                         title: str = "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–∏–∫—Å") -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–º–∏–∫—Å–∞.
        
        Args:
            panels: –°–ø–∏—Å–æ–∫ –ø–∞–Ω–µ–ª–µ–π –∫–æ–º–∏–∫—Å–∞
            characters: –°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            image_files: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            output_name: –ë–∞–∑–æ–≤–æ–µ –∏–º—è –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–º–∏–∫—Å–∞
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É HTML —Ñ–∞–π–ª—É
        """
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–ª—è –∫–æ–º–∏–∫—Å–∞: {title}")
        
        # –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        characters_html = self._create_characters_section(characters)
        
        # –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –ø–∞–Ω–µ–ª–µ–π
        panels_html = self._create_panels_section(panels, image_files)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π HTML
        html_content = self._create_full_html(
            title=title,
            characters_html=characters_html,
            panels_html=panels_html
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        filename = f"{output_name}.html"
        try:
            with open(filename, "w", encoding="utf-8") as f:
                f.write(html_content)
            
            logger.info(f"HTML —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {filename}")
            return filename
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è HTML —Ñ–∞–π–ª–∞: {e}")
            return ""
    
    def _create_characters_section(self, characters: List[ComicCharacter]) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ HTML —Å–µ–∫—Ü–∏–∏ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏.
        
        Args:
            characters: –°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            
        Returns:
            HTML –∫–æ–¥ —Å–µ–∫—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        """
        characters_html = ""
        for char in characters:
            characters_html += f"""
            <div class="character-card">
                <h4>{char.name}</h4>
                <p><strong>–†–æ–ª—å:</strong> {char.role}</p>
                <p><strong>–•–∞—Ä–∞–∫—Ç–µ—Ä:</strong> {char.personality}</p>
            </div>
            """
        
        return characters_html
    
    def _create_panels_section(self, 
                              panels: List[ComicPanel], 
                              image_files: List[str]) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ HTML —Å–µ–∫—Ü–∏–∏ —Å –ø–∞–Ω–µ–ª—è–º–∏.
        
        Args:
            panels: –°–ø–∏—Å–æ–∫ –ø–∞–Ω–µ–ª–µ–π
            image_files: –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            
        Returns:
            HTML –∫–æ–¥ —Å–µ–∫—Ü–∏–∏ –ø–∞–Ω–µ–ª–µ–π
        """
        panels_html = ""
        
        for i, panel in enumerate(panels):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            img_src = self._get_image_source(i, image_files, panel.panel_id)
            
            # –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –ø–∞–Ω–µ–ª–∏
            panels_html += f"""
            <div class="comic-panel enhanced">
                <div class="panel-header">
                    <span class="panel-number">–ü–∞–Ω–µ–ª—å {i+1}</span>
                    <span class="panel-mood">{panel.mood}</span>
                </div>
                <img class="panel-image" src="{img_src}" alt="–ü–∞–Ω–µ–ª—å {i+1}">
                <div class="panel-content">
                    <div class="scene-description">{panel.scene_description}</div>
                    {f'<div class="dialogue">üí¨ "{panel.dialogue}"</div>' if panel.dialogue else ''}
                    <div class="characters-present">
                        üë• –ü–µ—Ä—Å–æ–Ω–∞–∂–∏: {', '.join(panel.characters)}
                    </div>
                </div>
            </div>
            """
        
        return panels_html
    
    def _get_image_source(self, 
                         panel_index: int, 
                         image_files: List[str], 
                         panel_id: str) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–∞–Ω–µ–ª–∏.
        
        Args:
            panel_index: –ò–Ω–¥–µ–∫—Å –ø–∞–Ω–µ–ª–∏
            image_files: –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            panel_id: ID –ø–∞–Ω–µ–ª–∏
            
        Returns:
            –ò—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (base64 –∏–ª–∏ placeholder)
        """
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if panel_index < len(image_files) and os.path.exists(image_files[panel_index]):
            try:
                with open(image_files[panel_index], "rb") as f:
                    img_data = base64.b64encode(f.read()).decode()
                return f"data:image/png;base64,{img_data}"
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_files[panel_index]}: {e}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º placeholder
        return f"https://via.placeholder.com/600x400/4CAF50/white?text=–ü–∞–Ω–µ–ª—å+{panel_index+1}"
    
    def _create_full_html(self, 
                         title: str, 
                         characters_html: str, 
                         panels_html: str) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ HTML –¥–æ–∫—É–º–µ–Ω—Ç–∞.
        
        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            characters_html: HTML —Å–µ–∫—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            panels_html: HTML —Å–µ–∫—Ü–∏–∏ –ø–∞–Ω–µ–ª–µ–π
            
        Returns:
            –ü–æ–ª–Ω—ã–π HTML –∫–æ–¥
        """
        return f"""<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>{title}</title>
    <style>
        {self._get_css_styles()}
    </style>
</head>
<body>
    <div class="comic-container">
        <div class="header">
            <h1>üìö {title}</h1>
            <p>–£–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ –≤–∞–∂–Ω—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö</p>
        </div>
        
        <div class="characters-section">
            <h2 style="color: #333; margin-bottom: 10px;">üë• –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –∏—Å—Ç–æ—Ä–∏–∏</h2>
            <div class="characters-grid">
                {characters_html}
            </div>
        </div>
        
        <div class="comic-grid">
            {panels_html}
        </div>
        
        <div class="footer">
            <p>üé® –°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–º–∏–∫—Å–æ–≤</p>
            <p>–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Ä¢ –ü—Ä–æ–¥—É–º–∞–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π ‚Ä¢ –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç</p>
        </div>
    </div>
</body>
</html>"""
    
    def _get_css_styles(self) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ CSS —Å—Ç–∏–ª–µ–π –¥–ª—è HTML.
        
        Returns:
            CSS –∫–æ–¥
        """
        return """
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        .comic-container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        .header {
            background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        .characters-section {
            padding: 30px;
            background: #f8f9fa;
            border-bottom: 3px solid #e9ecef;
        }
        .characters-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        .character-card {
            background: white;
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            border-left: 5px solid #4CAF50;
        }
        .character-card h4 {
            color: #4CAF50;
            font-size: 1.3em;
            margin-bottom: 10px;
        }
        .comic-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
            gap: 30px;
            padding: 30px;
        }
        .comic-panel.enhanced {
            background: white;
            border-radius: 15px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            overflow: hidden;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        .comic-panel.enhanced:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 35px rgba(0,0,0,0.15);
        }
        .panel-header {
            background: linear-gradient(135deg, #333 0%, #555 100%);
            color: white;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .panel-number {
            font-weight: bold;
            font-size: 1.1em;
        }
        .panel-mood {
            background: rgba(255,255,255,0.2);
            padding: 5px 10px;
            border-radius: 15px;
            font-size: 0.9em;
        }
        .panel-image {
            width: 100%;
            height: 300px;
            object-fit: cover;
            display: block;
        }
        .panel-content {
            padding: 20px;
        }
        .scene-description {
            background: #e3f2fd;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 15px;
            border-left: 4px solid #2196F3;
            font-size: 1em;
            line-height: 1.5;
        }
        .dialogue {
            background: #fff3e0;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 15px;
            border-left: 4px solid #ff9800;
            font-style: italic;
            font-weight: 500;
            font-size: 1.1em;
        }
        .characters-present {
            background: #f3e5f5;
            padding: 10px 15px;
            border-radius: 8px;
            border-left: 3px solid #9c27b0;
            font-size: 0.95em;
            color: #666;
        }
        .footer {
            background: #333;
            color: white;
            text-align: center;
            padding: 20px;
            font-style: italic;
        }
        @media (max-width: 768px) {
            .comic-grid {
                grid-template-columns: 1fr;
                padding: 15px;
                gap: 20px;
            }
            .panel-image {
                height: 250px;
            }
        }
        """