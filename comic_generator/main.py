#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–º–∏–∫—Å–æ–≤.
"""

import argparse
import logging
import sys
import os
from pathlib import Path
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
current_dir = Path(__file__).parent
sys.path.append(str(current_dir))

from generators.comic_generator import ComicGenerator
from config.settings import Settings, DEFAULT_CONFIG
from models.comic_models import StyleType


def setup_logging(log_level: str = "INFO"):
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
    
    Args:
        log_level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    logging.basicConfig(
        level=getattr(logging, log_level.upper()),
        format=Settings.LOG_FORMAT,
        handlers=[
            logging.StreamHandler(sys.stdout),
            logging.FileHandler("comic_generator.log", encoding="utf-8")
        ]
    )


def print_banner():
    """–ü–µ—á–∞—Ç—å –±–∞–Ω–Ω–µ—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    banner = """
üé® ================================= üé®
    –ì–ï–ù–ï–†–ê–¢–û–† –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–´–• –ö–û–ú–ò–ö–°–û–í
üé® ================================= üé®

–ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∏–∫—Å—ã
—Å –ø–æ–º–æ—â—å—é AI –∞–≥–µ–Ω—Ç–æ–≤ –∏ Stable Diffusion
"""
    print(banner)


def validate_dependencies(generator: ComicGenerator) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º—ã.
    
    Args:
        generator: –≠–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        
    Returns:
        True –µ—Å–ª–∏ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    """
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    dependencies = generator.validate_dependencies()
    
    for service, available in dependencies.items():
        status = "‚úÖ" if available else "‚ùå"
        print(f"   {status} {service}: {'–î–æ—Å—Ç—É–ø–µ–Ω' if available else '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_validation = Settings.validate_config()
    for config_part, valid in config_validation.items():
        status = "‚úÖ" if valid else "‚ùå"
        print(f"   {status} {config_part}: {'OK' if valid else '–û—à–∏–±–∫–∞'}")
    
    all_valid = all(dependencies.values()) and all(config_validation.values())
    
    if not all_valid:
        print("\\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏.")
        print("   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Ollama –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 11434")
        print("   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Stable Diffusion WebUI –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 7860")
    
    return True  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω–æ


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(
        description="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–∏–∫—Å–æ–≤ –∏–∑ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python main.py document.pdf
  python main.py document.pdf --panels 10 --audience "—Å—Ç—É–¥–µ–Ω—Ç—ã"
  python main.py document.pdf --style professional --output my_comic
  python main.py --validate-only
        """
    )
    
    parser.add_argument(
        "pdf_file",
        nargs="?",
        help="–ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
    )
    
    parser.add_argument(
        "--panels", "-p",
        type=int,
        default=DEFAULT_CONFIG["defaults"]["panels_count"],
        help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π –≤ –∫–æ–º–∏–∫—Å–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 8)"
    )
    
    parser.add_argument(
        "--audience", "-a",
        default=DEFAULT_CONFIG["defaults"]["target_audience"],
        help="–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –≤–∑—Ä–æ—Å–ª—ã–µ)"
    )
    
    parser.add_argument(
        "--style", "-s",
        choices=[style.value for style in StyleType],
        default=StyleType.EDUCATIONAL.value,
        help="–°—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: educational)"
    )
    
    parser.add_argument(
        "--output", "-o",
        default="comic",
        help="–ë–∞–∑–æ–≤–æ–µ –∏–º—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: comic)"
    )
    
    parser.add_argument(
        "--validate-only",
        action="store_true",
        help="–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é"
    )
    
    parser.add_argument(
        "--log-level",
        choices=["DEBUG", "INFO", "WARNING", "ERROR"],
        default="INFO",
        help="–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: INFO)"
    )
    
    parser.add_argument(
        "--config",
        help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ JSON"
    )
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging(args.log_level)
    logger = logging.getLogger(__name__)
    
    print_banner()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = DEFAULT_CONFIG.copy()
    if args.config and os.path.exists(args.config):
        try:
            import json
            with open(args.config, 'r', encoding='utf-8') as f:
                custom_config = json.load(f)
            config.update(custom_config)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ {args.config}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    try:
        generator = ComicGenerator(config)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not validate_dependencies(generator):
        sys.exit(1)
    
    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è - –≤—ã—Ö–æ–¥–∏–º
    if args.validate_only:
        print("\\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        sys.exit(0)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if not args.pdf_file:
        print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å PDF —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        parser.print_help()
        sys.exit(1)
    
    if not os.path.exists(args.pdf_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.pdf_file}")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    try:
        print(f"\\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–º–∏–∫—Å–∞ –∏–∑ {args.pdf_file}")
        print(f"   üìä –ü–∞–Ω–µ–ª–µ–π: {args.panels}")
        print(f"   üë• –ê—É–¥–∏—Ç–æ—Ä–∏—è: {args.audience}")
        print(f"   üé® –°—Ç–∏–ª—å: {args.style}")
        print(f"   üìÅ –í—ã—Ö–æ–¥–Ω–æ–µ –∏–º—è: {args.output}")
        print()
        
        result = generator.generate_comic_from_pdf(
            pdf_path=args.pdf_file,
            target_audience=args.audience,
            num_panels=args.panels,
            output_name=args.output,
            style=args.style
        )
        
        if result:
            print(f"\\nüéâ –ö–æ–º–∏–∫—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            print(f"üìÑ HTML —Ñ–∞–π–ª: {result}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = generator.get_generation_stats()
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {stats.get('duration_seconds', 0):.1f} —Å–µ–∫")
            print(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω–æ: {stats.get('images_generated', 0)}")
            print(f"ü§ñ –í—ã–∑–æ–≤–æ–≤ LLM: {stats.get('llm_calls', 0)}")
            
            if stats.get('errors'):
                print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(stats['errors'])}")
            
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∏–∫—Å")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\\n‚èπÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()